version: '3.8'

services:
  # ============================================
  # BASE DE DATOS POSTGRESQL
  # ============================================
  db:
    image: postgres:16
    container_name: transporte_db
    env_file:
      - ./backend/.env
    environment:
      POSTGRES_DB: transporte
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      TZ: "America/La_Paz"
      PGTZ: "America/La_Paz"
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - transporte_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d transporte"]
      interval: 5s
      timeout: 5s
      retries: 20

  # ============================================
  # PGADMIN - Administrador de PostgreSQL
  # ============================================
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: transporte_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@transporte.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - transporte_network
    depends_on:
      - db

  # ============================================
  # BACKEND DJANGO
  # ============================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: transporte_backend
    env_file:
      - ./backend/.env
    environment:
      POSTGRES_HOST: db
      REDIS_URL: "redis://redis:6379/0"
      # IP automática habilitada
      AUTO_DETECT_IP: "true"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
    command: bash -lc "python detect_ip.py && python manage.py migrate --noinput || true && python manage.py seed user rol --force && python manage.py collectstatic --noinput || true && python manage.py runserver 0.0.0.0:8000"
    ports:
      - "8000:8000"

  # ============================================
  # FRONTEND REACT/VITE
  # ============================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: transporte_frontend
    restart: unless-stopped
    working_dir: /app
    env_file:
      - ./frontend/.env
    environment:
      HOST: "0.0.0.0"  # Vite necesita HOST para exponer en 0.0.0.0
      # Dejamos VITE_API_URL vacío para habilitar detección automática
      VITE_API_URL: ""
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - transporte_network
    command: sh -c "npm install && npm run dev -- --host"
    ports:
      - "5173:5173"
    depends_on:
      - backend

  redis:
    image: redis:7-alpine
    container_name: transporte_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  mailhog:
    image: mailhog/mailhog
    container_name: transporte_mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - transporte_network

volumes:
  pgdata:
  redis_data:
