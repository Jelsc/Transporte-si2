"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os
from datetime import timedelta
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Cargar variables de entorno desde el archivo .env
load_dotenv(BASE_DIR / ".env")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY", "change-me-dev")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DJANGO_DEBUG", "1") == "1"


# ========== CONFIGURACIÓN AUTOMÁTICA DE HOSTS ==========
def get_allowed_hosts():
    """
    Configura automáticamente los hosts permitidos:
    - Desarrollo: localhost, 127.0.0.1
    - Docker: 0.0.0.0 y localhost
    - Producción: cualquier host (*) - Django se encarga de la validación
    """
    env_hosts = os.getenv("DJANGO_ALLOWED_HOSTS", "")

    if env_hosts and env_hosts.strip():
        # Si hay hosts específicos en la variable de entorno
        hosts = [host.strip() for host in env_hosts.split(",") if host.strip()]
        print(f"🔧 [Django] Hosts configurados por variable de entorno: {hosts}")
        return hosts

    # Configuración automática por defecto para máxima compatibilidad
    default_hosts = [
        "*"
    ]  # Permitir cualquier host - más flexible para contenedores y nube
    print(f"🌐 [Django] Hosts automáticos configurados: {default_hosts}")
    return default_hosts


ALLOWED_HOSTS = get_allowed_hosts()


# ========== CONFIGURACIÓN AUTOMÁTICA DE CORS ==========
def configure_cors():
    """
    Configura CORS automáticamente:
    - Permite todos los orígenes por defecto para máxima compatibilidad
    - Puede ser sobreescrito con variables de entorno
    """
    # Por defecto permitir todos los orígenes para máxima compatibilidad
    allow_all = os.getenv("CORS_ALLOW_ALL_ORIGINS", "True") == "True"

    if allow_all:
        print("🌍 [Django] CORS configurado para permitir TODOS los orígenes")
        return True, []
    else:
        # URLs específicas si se desactiva allow_all
        frontend_urls = [
            "http://localhost:5173",
            "http://127.0.0.1:5173",
            "http://localhost:3000",
            "http://127.0.0.1:3000",
            # Emulador Android
            "http://10.0.2.2:5173",
            "http://10.0.2.2:8000",
        ]

        # Agregar URLs de variables de entorno si existen
        env_frontend = os.getenv("FRONTEND_URL")
        env_frontend_alt = os.getenv("FRONTEND_URL_ALT")

        if env_frontend:
            frontend_urls.append(env_frontend)
        if env_frontend_alt:
            frontend_urls.append(env_frontend_alt)

        # Intentar detectar IP pública para casos de EC2/nube
        try:
            from core.utils.ip_detection import get_public_ip

            ip = get_public_ip()
            if ip:
                frontend_urls.append(f"http://{ip}:5173")
                frontend_urls.append(f"http://{ip}:8000")
                print(f"🌎 [Django] IP pública detectada y agregada a CORS: {ip}")
        except Exception as e:
            print(f"⚠️ [Django] No se pudo detectar IP pública: {e}")

        print(
            f"🎯 [Django] CORS configurado para orígenes específicos: {frontend_urls}"
        )
        return False, frontend_urls


CORS_ALLOW_ALL_ORIGINS, CORS_ALLOWED_ORIGINS = configure_cors()
CORS_ALLOW_CREDENTIALS = True  # Habilitar cookies/sesión

# ========== VARIABLES DE FRONTEND PARA COMPATIBILIDAD ==========
# Estas variables se mantienen para compatibilidad con configuraciones existentes
FRONTEND_URL = os.getenv("FRONTEND_URL", "http://localhost:5173")
FRONTEND_URL_ALT = os.getenv("FRONTEND_URL_ALT", "http://127.0.0.1:5173")

print(f"🎨 [Django] Frontend URLs configuradas: {FRONTEND_URL}, {FRONTEND_URL_ALT}")
# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework.authtoken",
    "django_filters",
    "corsheaders",
    "core",
    "users",
    "conductores",
    "personal",
    # Requisito para allauth
    "django.contrib.sites",
    # Allauth (core + cuentas + social)
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    # Configura el modelo de usuario personalizado
    # Proveedores sociales (ej: Google)
    "allauth.socialaccount.providers.google",
    # dj-rest-auth (REST endpoints de login/registro/password/social)
    # Apps del proyecto
    "notificaciones",
    "dj_rest_auth",
    "dj_rest_auth.registration",
    # "dj_rest_auth.jwt_auth",
    "rest_framework_simplejwt.token_blacklist",
    "bitacora",
    "vehiculos",
    "viajes",
]

AUTH_USER_MODEL = "users.CustomUser"

SITE_ID = 1  # importante para allauth


MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "allauth.account.middleware.AccountMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "django.template.context_processors.i18n",
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",  # auth normal
    "allauth.account.auth_backends.AuthenticationBackend",  # allauth
]

WSGI_APPLICATION = "core.wsgi.application"

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("POSTGRES_DB", "transporte"),
        "USER": os.getenv("POSTGRES_USER", "postgres"),
        "PASSWORD": os.getenv("POSTGRES_PASSWORD", "postgres"),
        "HOST": os.getenv("POSTGRES_HOST", "127.0.0.1"),
        "PORT": os.getenv("POSTGRES_PORT", "5432"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "es"

TIME_ZONE = "America/La_Paz"

USE_I18N = True

# Desactivamos el soporte de zona horaria para usar la hora local directamente
# Esto evita que Django realice conversiones automáticas
USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# ========== CONFIGURACIÓN AUTOMÁTICA DE CSRF ==========
def get_csrf_trusted_origins():
    """
    Configura los orígenes de confianza para CSRF
    """
    origins = [
        FRONTEND_URL,
        FRONTEND_URL_ALT,
        # Emulador Android
        "http://10.0.2.2:8000",
        "http://10.0.2.2:5173",
    ]

    # Intentar detectar IP pública para casos de EC2/nube
    try:
        from core.utils.ip_detection import get_public_ip

        ip = get_public_ip()
        if ip:
            origins.append(f"http://{ip}:5173")
            origins.append(f"http://{ip}:8000")
            print(f"🔒 [Django] IP pública agregada a CSRF origins: {ip}")
    except Exception as e:
        print(f"⚠️ [Django] No se pudo agregar IP a CSRF origins: {e}")

    print(f"🔐 [Django] CSRF orígenes de confianza: {origins}")
    return origins


CSRF_TRUSTED_ORIGINS = get_csrf_trusted_origins()

# A dónde redirigir después de login/logout
LOGIN_REDIRECT_URL = "/"
ACCOUNT_LOGOUT_REDIRECT_URL = "/"

# URLs de redirección para verificación de email
ACCOUNT_EMAIL_CONFIRMATION_AUTO_LOGIN = True
ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL = (
    f"{FRONTEND_URL}/email-verification?verified=true"
)
ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = (
    f"{FRONTEND_URL}/email-verification?verified=true"
)

# Política de cuentas (ajústalo a tu gusto)
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = True
ACCOUNT_AUTHENTICATION_METHOD = "username_email"  # username o email
ACCOUNT_EMAIL_VERIFICATION = os.getenv("ACCOUNT_EMAIL_VERIFICATION", "none")
ACCOUNT_CONFIRM_EMAIL_ON_GET = True  # link de confirmación hace login al abrirlo
ACCOUNT_UNIQUE_EMAIL = True  # Cada email debe ser único
LOGIN_ON_EMAIL_CONFIRMATION = True

ACCOUNT_EMAIL_VERIFICATION_METHOD = (
    "link"  # Opciones: "link" (clásico) o "code" (moderno)
)


# Configuración de Email
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = os.getenv("EMAIL_HOST", "mailhog")
EMAIL_PORT = int(os.getenv("EMAIL_PORT", "1025"))
EMAIL_USE_TLS = os.getenv("EMAIL_USE_TLS", "False") == "True"
EMAIL_USE_SSL = os.getenv("EMAIL_USE_SSL", "False") == "True"
DEFAULT_FROM_EMAIL = os.getenv("DEFAULT_FROM_EMAIL", "no-reply@localhost")

# ====== DRF + JWT ======
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    # --- NUEVO ---
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 10,  # registros por página
}
# REST_USE_JWT = True

REST_AUTH = {
    "USE_JWT": True,
    "JWT_AUTH_COOKIE": "jwt-auth-cookie",
    "JWT_AUTH_REFRESH_COOKIE": "jwt-refresh-cookie",
    "JWT_AUTH_HTTPONLY": True,  # True para que la cookie no sea accesible por JS
    "REGISTER_SERIALIZER": "users.serializers.CustomRegisterSerializer",
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "AUTH_HEADER_TYPES": ("Bearer",),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
}

# ====== GOOGLE OAUTH CONFIGURATION ======
SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "SCOPE": [
            "profile",
            "email",
        ],
        "AUTH_PARAMS": {
            "access_type": "online",
        },
        "OAUTH_PKCE_ENABLED": True,
    }
}

# ====== CACHE CONFIGURATION ======
# Configuración para verificación móvil
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        "LOCATION": "unique-snowflake",
    }
}

# ====== EMAIL BACKENDS ======
# Backend de email personalizado para verificación móvil
EMAIL_BACKENDS = {
    "default": "django.core.mail.backends.smtp.EmailBackend",
    "mobile_verification": "django.core.mail.backends.console.EmailBackend",  # Para testing
}

# Configuración de Google OAuth
GOOGLE_OAUTH2_CLIENT_ID = os.getenv("GOOGLE_OAUTH2_CLIENT_ID", "")
GOOGLE_OAUTH2_CLIENT_SECRET = os.getenv("GOOGLE_OAUTH2_CLIENT_SECRET", "")

# Configuración de sitios para allauth
SITE_ID = int(os.getenv("SITE_ID", "1"))

# ====== SECURITY SETTINGS FOR PRODUCTION ======
# Configuraciones de seguridad que se activan solo en producción

# SSL/HTTPS Configuration
if not DEBUG:
    SECURE_SSL_REDIRECT = os.getenv("SECURE_SSL_REDIRECT", "True") == "True"
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

    # Cookies security
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_HTTPONLY = True
    SESSION_COOKIE_HTTPONLY = True

    # HSTS (HTTP Strict Transport Security)
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True

    # Content security
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_BROWSER_XSS_FILTER = True
    X_FRAME_OPTIONS = "DENY"

    # Referrer policy
    SECURE_REFERRER_POLICY = "strict-origin-when-cross-origin"

# ====== FIREBASE CONFIGURATION ======
# Configuración de Firebase para notificaciones push
FIREBASE_SERVICE_ACCOUNT_PATH = os.getenv(
    "FIREBASE_SERVICE_ACCOUNT_PATH", "/app/firebase-credentials.json"
)
FIREBASE_PROJECT_ID = os.getenv("FIREBASE_PROJECT_ID", "tu-proyecto")
FIREBASE_MESSAGING_SENDER_ID = os.getenv("FIREBASE_MESSAGING_SENDER_ID", "123456789")

# URLs de notificaciones
NOTIFICATION_ICON_URL = os.getenv(
    "NOTIFICATION_ICON_URL", "https://tu-dominio.com/static/img/icon-192x192.png"
)
NOTIFICATION_BADGE_URL = os.getenv(
    "NOTIFICATION_BADGE_URL", "https://tu-dominio.com/static/img/badge-72x72.png"
)

# ====== LOGGING CONFIGURATION ======
# Configuración de logs mejorada para producción
import os
import logging

# Asegurar que el directorio de logs existe
LOG_DIR = "/app/logs"
if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR, exist_ok=True)

# Configurar handlers según el entorno
log_handlers = ["console"]
if DEBUG:
    # En desarrollo, usar solo consola para simplicidad
    log_handlers = ["console"]
else:
    # En producción, usar archivo y consola
    log_handlers = ["file", "console"]

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "file": {
            "level": "INFO",
            "class": "logging.FileHandler",
            "filename": os.path.join(LOG_DIR, "django.log"),
            "formatter": "verbose",
        },
        "console": {
            "level": "DEBUG" if DEBUG else "INFO",
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
    },
    "loggers": {
        "django": {
            "handlers": log_handlers,
            "level": "DEBUG" if DEBUG else "INFO",
            "propagate": True,
        },
        "notificaciones": {
            "handlers": log_handlers,
            "level": "DEBUG",
            "propagate": True,
        },
    },
}
